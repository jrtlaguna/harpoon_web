"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from __future__ import absolute_import
import os
from pathlib import Path

import django_heroku
from django.contrib.messages import constants as messages
from dotenv import load_dotenv
import mimetypes

from celery.schedules import crontab

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-9)l6i934sde#f0l2+5w(w@yv2r2keciei1f*mepdynw&fy60ex"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))
SITE_ID = 1

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", []).split(" ")

# Application definition

INSTALLED_APPS = [
    # Django apps
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.humanize",
    "django.contrib.postgres",
    # Internal apps
    "authentication.apps.AuthenticationConfig",
    "core.apps.CoreConfig",
    "admins.apps.AdminsConfig",
    "guests.apps.GuestsConfig",
    "charter.apps.CharterConfig",
    "vessels.apps.VesselsConfig",
    "preferences.apps.PreferencesConfig",
    # 3rd-party apps
    "crispy_forms",
    "rest_framework",
    "django_extensions",
    "celery",
    "django_celery_beat",
    "rest_framework_simplejwt",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# DJANGO REST
REST_FRAMEWORK = {
    # 'DEFAULT_FILTER_BACKENDS': [
    #     'django_filters.rest_framework.DjangoFilterBackend'
    # ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User model
# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#substituting-a-custom-user-model

AUTH_USER_MODEL = "authentication.User"

# Messages
# https://docs.djangoproject.com/en/3.2/ref/contrib/messages/#message-tags

MESSAGE_TAGS = {messages.ERROR: "danger"}

# Crispy Forms
# https://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs

CRISPY_TEMPLATE_PACK = "bootstrap4"

IS_HEROKU = int(os.getenv("IS_HEROKU", default=0))

# Logging
# https://docs.djangoproject.com/en/3.2/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
    },
}
LOGIN_URL = "/"
LOGIN_REDIRECT_URL = "/"

# Email
# https://docs.djangoproject.com/en/3.2/topics/email/

EMAIL_BACKEND = os.environ.get(
    "EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_FROM = os.environ.get("EMAIL_FROM")
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_USE_TLS = int(os.environ.get("EMAIL_USE_TLS", default=0))
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

if IS_HEROKU:
    django_heroku.settings(locals(), logging=False)
    # django-storages
    # https://pypi.org/project/django-storages/

    DEFAULT_FILE_STORAGE = os.getenv(
        "DEFAULT_FILE_STORAGE", "storages.backends.s3boto3.S3Boto3Storage"
    )
    STATICFILES_STORAGE = os.getenv(
        "STATICFILES_STORAGE", "storages.backends.s3boto3.S3StaticStorage"
    )
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")

# Application specific

GUEST_REGISTER_URL = os.getenv("GUEST_REGISTER_URL", "localhost:8000/guest/register/")
# CELERY
CELERY_BROKER_URL = os.getenv("CLOUDAMQP_URL", "amqp://localhost")
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_BEAT_SCHEDULE = {
    "one_week_notice": {
        "task": "admins.tasks.generate_one_week_notice",
        "schedule": crontab(hour=0, minute=15),
    },
    "two_week_notice": {
        "task": "admins.tasks.generate_two_week_notice",
        "schedule": crontab(hour=0, minute=5),
    },
    "one_week_email_notice": {
        "task": "admins.tasks.email_one_week_notice",
        "schedule": crontab(hour=0, minute=0),
    },
    "post_trip_email_notice": {
        "task": "admins.tasks.email_post_trip_notice",
        "schedule": crontab(hour=0, minute=10),
    },
}

JAZZMIN_SETTINGS = {
    "site_title": "Harpoon Yacht Services",
    "site_brand": "Harpoon Admin",
    "site_header": "Harpoon Yacht Services",
    "copyright": "Harpoon Yacht Services",
    "welcome_sign": "Administration Panel",
    "site_logo": "authentication/img/ship-img.png",
    "icons": {
        "authentication.User": "fas fa-users",
        "accounts.Account": "fas fa-user",
        "admins.Admin": "fas fa-user",
        "admins.AdminNotification": "fas fa-bell",
        "admins.AdminProfile": "fas fa-user",
        "admins.CrewProfile": "fas fa-user",
        "auth.Group": "fas fa-users",
        "core.Document": "fas fa-tags",
        "charter.GuestDetail": "fas fa-address-card",
        "charter.Charter": "fas fa-anchor",
        "charter.FoodPreferences": "fa fa-utensils",
        "charter.MealAndRoomPreferences": "fas fa-hotel",
        "charter.BreakfastSelection": "fa fa-utensils",
        "charter.LunchSelection": "fa fa-utensils",
        "charter.DinnerSelection": "fa fa-utensils",
        "charter.DietServicesSizesPreferences": "fas fa-tags",
        "charter.OtherServices": "fas fa-tags",
        "charter.BeveragesAndAlcoholicPreferences": "fas fa-glass-martini",
        "charter.MilkSelection": "fas fa-coffee",
        "charter.CoffeeSelection": "fas fa-coffee",
        "charter.TeaSelection": "fas fa-coffee",
        "charter.WaterSelection": "fas fa-coffee",
        "charter.JuiceSelection": "fas fa-coffee",
        "charter.SodasAndMixersSelection": "fas fa-coffee",
        "charter.AddOnsSelection": "fas fa-coffee",
        "preferences.ShortJetPreferenceSheet": "fas fa-coffee",
        "preferences.LongJetPreferenceSheet": "fas fa-coffee",
        "guests.GuestProfile": "fas fa-address-card",
        "vessels.Vessel": "fas fa-anchor",
        "django.contrib.sites.models.Site": "",
    },
    "hide_apps": ["django_celery_beat"],
}

# JAZZMIN_UI_TWEAKS = {
#     "dark_mode_theme": "darkly",
# }
mimetypes.add_type("text/javascript", ".js", True)
